// Generated by @wagmi/cli@1.3.0 on 9/7/2023 at 3:42:48 PM
import {
  useContractRead,
  UseContractReadConfig,
  useContractWrite,
  UseContractWriteConfig,
  usePrepareContractWrite,
  UsePrepareContractWriteConfig,
  useContractEvent,
  UseContractEventConfig,
} from 'wagmi'
import {
  ReadContractResult,
  WriteContractMode,
  PrepareWriteContractResult,
} from 'wagmi/actions'

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// SportsPredictionGame
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// export const sportsPredictionGameABI = [
//   {
//     stateMutability: 'nonpayable',
//     type: 'constructor',
//     inputs: [
//       {
//         name: 'config',
//         internalType: 'struct Config',
//         type: 'tuple',
//         components: [
//           { name: 'oracle', internalType: 'address', type: 'address' },
//           { name: 'ccipRouter', internalType: 'address', type: 'address' },
//           { name: 'link', internalType: 'address', type: 'address' },
//           { name: 'weth9Token', internalType: 'address', type: 'address' },
//           { name: 'exchangeToken', internalType: 'address', type: 'address' },
//           { name: 'uniswapV3Router', internalType: 'address', type: 'address' },
//           { name: 'subscriptionId', internalType: 'uint64', type: 'uint64' },
//           {
//             name: 'destinationChainSelector',
//             internalType: 'uint64',
//             type: 'uint64',
//           },
//           { name: 'gasLimit', internalType: 'uint32', type: 'uint32' },
//           { name: 'secrets', internalType: 'bytes', type: 'bytes' },
//           { name: 'source', internalType: 'string', type: 'string' },
//         ],
//       },
//     ],
//   },
//   {
//     type: 'error',
//     inputs: [
//       {
//         name: 'destinationChainSelector',
//         internalType: 'uint64',
//         type: 'uint64',
//       },
//     ],
//     name: 'DestinationChainNotWhitelisted',
//   },
//   { type: 'error', inputs: [], name: 'EmptyArgs' },
//   { type: 'error', inputs: [], name: 'EmptySecrets' },
//   { type: 'error', inputs: [], name: 'EmptySource' },
//   {
//     type: 'error',
//     inputs: [
//       { name: 'owner', internalType: 'address', type: 'address' },
//       { name: 'target', internalType: 'address', type: 'address' },
//       { name: 'value', internalType: 'uint256', type: 'uint256' },
//     ],
//     name: 'FailedToWithdrawEth',
//   },
//   { type: 'error', inputs: [], name: 'GameAlreadyRegistered' },
//   { type: 'error', inputs: [], name: 'GameAlreadyStarted' },
//   { type: 'error', inputs: [], name: 'GameIsResolved' },
//   { type: 'error', inputs: [], name: 'GameNotReadyToResolve' },
//   { type: 'error', inputs: [], name: 'GameNotRegistered' },
//   { type: 'error', inputs: [], name: 'GameNotResolved' },
//   { type: 'error', inputs: [], name: 'InsufficientValue' },
//   { type: 'error', inputs: [], name: 'InvalidResult' },
//   { type: 'error', inputs: [], name: 'NoDestinationContractReceiver' },
//   { type: 'error', inputs: [], name: 'NoInlineSecrets' },
//   {
//     type: 'error',
//     inputs: [
//       { name: 'currentBalance', internalType: 'uint256', type: 'uint256' },
//       { name: 'calculatedFees', internalType: 'uint256', type: 'uint256' },
//     ],
//     name: 'NotEnoughBalance',
//   },
//   { type: 'error', inputs: [], name: 'NothingToClaim' },
//   { type: 'error', inputs: [], name: 'NothingToWithdraw' },
//   { type: 'error', inputs: [], name: 'RequestIsAlreadyPending' },
//   { type: 'error', inputs: [], name: 'RequestIsNotPending' },
//   { type: 'error', inputs: [], name: 'SenderIsNotRegistry' },
//   { type: 'error', inputs: [], name: 'TimestampInPast' },
//   {
//     type: 'event',
//     anonymous: false,
//     inputs: [
//       { name: 'user', internalType: 'address', type: 'address', indexed: true },
//       {
//         name: 'gameId',
//         internalType: 'uint256',
//         type: 'uint256',
//         indexed: true,
//       },
//       {
//         name: 'amount',
//         internalType: 'uint256',
//         type: 'uint256',
//         indexed: false,
//       },
//     ],
//     name: 'Claimed',
//   },
//   {
//     type: 'event',
//     anonymous: false,
//     inputs: [
//       {
//         name: 'gameId',
//         internalType: 'uint256',
//         type: 'uint256',
//         indexed: true,
//       },
//     ],
//     name: 'GameRegistered',
//   },
//   {
//     type: 'event',
//     anonymous: false,
//     inputs: [
//       {
//         name: 'gameId',
//         internalType: 'uint256',
//         type: 'uint256',
//         indexed: true,
//       },
//       {
//         name: 'result',
//         internalType: 'enum SportsPredictionGame.Result',
//         type: 'uint8',
//         indexed: false,
//       },
//     ],
//     name: 'GameResolved',
//   },
//   {
//     type: 'event',
//     anonymous: false,
//     inputs: [
//       {
//         name: 'messageId',
//         internalType: 'bytes32',
//         type: 'bytes32',
//         indexed: true,
//       },
//       {
//         name: 'destinationChainSelector',
//         internalType: 'uint64',
//         type: 'uint64',
//         indexed: true,
//       },
//       {
//         name: 'receiver',
//         internalType: 'address',
//         type: 'address',
//         indexed: false,
//       },
//       { name: 'data', internalType: 'bytes', type: 'bytes', indexed: false },
//       {
//         name: 'token',
//         internalType: 'address',
//         type: 'address',
//         indexed: false,
//       },
//       {
//         name: 'tokenAmount',
//         internalType: 'uint256',
//         type: 'uint256',
//         indexed: false,
//       },
//       {
//         name: 'feeToken',
//         internalType: 'address',
//         type: 'address',
//         indexed: false,
//       },
//       {
//         name: 'fees',
//         internalType: 'uint256',
//         type: 'uint256',
//         indexed: false,
//       },
//     ],
//     name: 'MessageSent',
//   },
//   { type: 'event', anonymous: false, inputs: [], name: 'NoPendingRequest' },
//   {
//     type: 'event',
//     anonymous: false,
//     inputs: [
//       { name: 'from', internalType: 'address', type: 'address', indexed: true },
//       { name: 'to', internalType: 'address', type: 'address', indexed: true },
//     ],
//     name: 'OwnershipTransferRequested',
//   },
//   {
//     type: 'event',
//     anonymous: false,
//     inputs: [
//       { name: 'from', internalType: 'address', type: 'address', indexed: true },
//       { name: 'to', internalType: 'address', type: 'address', indexed: true },
//     ],
//     name: 'OwnershipTransferred',
//   },
//   {
//     type: 'event',
//     anonymous: false,
//     inputs: [
//       { name: 'user', internalType: 'address', type: 'address', indexed: true },
//       {
//         name: 'gameId',
//         internalType: 'uint256',
//         type: 'uint256',
//         indexed: true,
//       },
//       {
//         name: 'result',
//         internalType: 'enum SportsPredictionGame.Result',
//         type: 'uint8',
//         indexed: false,
//       },
//       {
//         name: 'amount',
//         internalType: 'uint256',
//         type: 'uint256',
//         indexed: false,
//       },
//     ],
//     name: 'Predicted',
//   },
//   {
//     type: 'event',
//     anonymous: false,
//     inputs: [
//       {
//         name: 'response',
//         internalType: 'bytes',
//         type: 'bytes',
//         indexed: false,
//       },
//     ],
//     name: 'RequestFailed',
//   },
//   {
//     type: 'event',
//     anonymous: false,
//     inputs: [
//       { name: 'id', internalType: 'bytes32', type: 'bytes32', indexed: true },
//     ],
//     name: 'RequestFulfilled',
//   },
//   {
//     type: 'event',
//     anonymous: false,
//     inputs: [
//       { name: 'id', internalType: 'bytes32', type: 'bytes32', indexed: true },
//     ],
//     name: 'RequestSent',
//   },
//   {
//     type: 'event',
//     anonymous: false,
//     inputs: [
//       {
//         name: 'sportId',
//         internalType: 'uint256',
//         type: 'uint256',
//         indexed: false,
//       },
//       {
//         name: 'externalId',
//         internalType: 'uint256',
//         type: 'uint256',
//         indexed: false,
//       },
//       {
//         name: 'requestId',
//         internalType: 'bytes32',
//         type: 'bytes32',
//         indexed: false,
//       },
//     ],
//     name: 'RequestedResult',
//   },
//   {
//     type: 'event',
//     anonymous: false,
//     inputs: [
//       {
//         name: 'requestId',
//         internalType: 'bytes32',
//         type: 'bytes32',
//         indexed: false,
//       },
//       {
//         name: 'response',
//         internalType: 'bytes',
//         type: 'bytes',
//         indexed: false,
//       },
//     ],
//     name: 'ResultReceived',
//   },
//   {
//     type: 'event',
//     anonymous: false,
//     inputs: [
//       {
//         name: 'requestId',
//         internalType: 'bytes32',
//         type: 'bytes32',
//         indexed: true,
//       },
//       { name: 'to', internalType: 'address', type: 'address', indexed: true },
//       {
//         name: 'amount',
//         internalType: 'uint256',
//         type: 'uint256',
//         indexed: false,
//       },
//     ],
//     name: 'TransferRequestSent',
//   },
//   {
//     stateMutability: 'nonpayable',
//     type: 'function',
//     inputs: [],
//     name: 'acceptOwnership',
//     outputs: [],
//   },
//   {
//     stateMutability: 'view',
//     type: 'function',
//     inputs: [
//       { name: 'gameId', internalType: 'uint256', type: 'uint256' },
//       { name: 'wager', internalType: 'uint256', type: 'uint256' },
//       {
//         name: 'result',
//         internalType: 'enum SportsPredictionGame.Result',
//         type: 'uint8',
//       },
//     ],
//     name: 'calculateWinnings',
//     outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
//   },
//   {
//     stateMutability: 'view',
//     type: 'function',
//     inputs: [{ name: '', internalType: 'bytes', type: 'bytes' }],
//     name: 'checkUpkeep',
//     outputs: [
//       { name: '', internalType: 'bool', type: 'bool' },
//       { name: '', internalType: 'bytes', type: 'bytes' },
//     ],
//   },
//   {
//     stateMutability: 'nonpayable',
//     type: 'function',
//     inputs: [
//       { name: 'gameId', internalType: 'uint256', type: 'uint256' },
//       { name: 'transfer', internalType: 'bool', type: 'bool' },
//     ],
//     name: 'claim',
//     outputs: [],
//   },
//   {
//     stateMutability: 'nonpayable',
//     type: 'function',
//     inputs: [
//       {
//         name: '_destinationChainSelector',
//         internalType: 'uint64',
//         type: 'uint64',
//       },
//     ],
//     name: 'denylistDestinationChain',
//     outputs: [],
//   },
//   {
//     stateMutability: 'view',
//     type: 'function',
//     inputs: [
//       {
//         name: 'req',
//         internalType: 'struct Functions.Request',
//         type: 'tuple',
//         components: [
//           {
//             name: 'codeLocation',
//             internalType: 'enum Functions.Location',
//             type: 'uint8',
//           },
//           {
//             name: 'secretsLocation',
//             internalType: 'enum Functions.Location',
//             type: 'uint8',
//           },
//           {
//             name: 'language',
//             internalType: 'enum Functions.CodeLanguage',
//             type: 'uint8',
//           },
//           { name: 'source', internalType: 'string', type: 'string' },
//           { name: 'secrets', internalType: 'bytes', type: 'bytes' },
//           { name: 'args', internalType: 'string[]', type: 'string[]' },
//         ],
//       },
//       { name: 'subscriptionId', internalType: 'uint64', type: 'uint64' },
//       { name: 'gasLimit', internalType: 'uint32', type: 'uint32' },
//       { name: 'gasPrice', internalType: 'uint256', type: 'uint256' },
//     ],
//     name: 'estimateCost',
//     outputs: [{ name: '', internalType: 'uint96', type: 'uint96' }],
//   },
//   {
//     stateMutability: 'view',
//     type: 'function',
//     inputs: [],
//     name: 'getActiveGames',
//     outputs: [
//       {
//         name: '',
//         internalType: 'struct SportsPredictionGame.Game[]',
//         type: 'tuple[]',
//         components: [
//           { name: 'sportId', internalType: 'uint256', type: 'uint256' },
//           { name: 'externalId', internalType: 'uint256', type: 'uint256' },
//           { name: 'timestamp', internalType: 'uint256', type: 'uint256' },
//           { name: 'homeWagerAmount', internalType: 'uint256', type: 'uint256' },
//           { name: 'awayWagerAmount', internalType: 'uint256', type: 'uint256' },
//           { name: 'resolved', internalType: 'bool', type: 'bool' },
//           {
//             name: 'result',
//             internalType: 'enum SportsPredictionGame.Result',
//             type: 'uint8',
//           },
//         ],
//       },
//     ],
//   },
//   {
//     stateMutability: 'view',
//     type: 'function',
//     inputs: [{ name: 'user', internalType: 'address', type: 'address' }],
//     name: 'getActivePredictions',
//     outputs: [
//       {
//         name: '',
//         internalType: 'struct SportsPredictionGame.Prediction[]',
//         type: 'tuple[]',
//         components: [
//           { name: 'gameId', internalType: 'uint256', type: 'uint256' },
//           {
//             name: 'result',
//             internalType: 'enum SportsPredictionGame.Result',
//             type: 'uint8',
//           },
//           { name: 'amount', internalType: 'uint256', type: 'uint256' },
//           { name: 'claimed', internalType: 'bool', type: 'bool' },
//         ],
//       },
//     ],
//   },
//   {
//     stateMutability: 'view',
//     type: 'function',
//     inputs: [],
//     name: 'getDONPublicKey',
//     outputs: [{ name: '', internalType: 'bytes', type: 'bytes' }],
//   },
//   {
//     stateMutability: 'view',
//     type: 'function',
//     inputs: [{ name: 'gameId', internalType: 'uint256', type: 'uint256' }],
//     name: 'getGame',
//     outputs: [
//       {
//         name: '',
//         internalType: 'struct SportsPredictionGame.Game',
//         type: 'tuple',
//         components: [
//           { name: 'sportId', internalType: 'uint256', type: 'uint256' },
//           { name: 'externalId', internalType: 'uint256', type: 'uint256' },
//           { name: 'timestamp', internalType: 'uint256', type: 'uint256' },
//           { name: 'homeWagerAmount', internalType: 'uint256', type: 'uint256' },
//           { name: 'awayWagerAmount', internalType: 'uint256', type: 'uint256' },
//           { name: 'resolved', internalType: 'bool', type: 'bool' },
//           {
//             name: 'result',
//             internalType: 'enum SportsPredictionGame.Result',
//             type: 'uint8',
//           },
//         ],
//       },
//     ],
//   },
//   {
//     stateMutability: 'pure',
//     type: 'function',
//     inputs: [
//       { name: 'sportId', internalType: 'uint256', type: 'uint256' },
//       { name: 'externalId', internalType: 'uint256', type: 'uint256' },
//     ],
//     name: 'getGameId',
//     outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
//   },
//   {
//     stateMutability: 'view',
//     type: 'function',
//     inputs: [{ name: 'user', internalType: 'address', type: 'address' }],
//     name: 'getPastPredictions',
//     outputs: [
//       {
//         name: '',
//         internalType: 'struct SportsPredictionGame.Prediction[]',
//         type: 'tuple[]',
//         components: [
//           { name: 'gameId', internalType: 'uint256', type: 'uint256' },
//           {
//             name: 'result',
//             internalType: 'enum SportsPredictionGame.Result',
//             type: 'uint8',
//           },
//           { name: 'amount', internalType: 'uint256', type: 'uint256' },
//           { name: 'claimed', internalType: 'bool', type: 'bool' },
//         ],
//       },
//     ],
//   },
//   {
//     stateMutability: 'nonpayable',
//     type: 'function',
//     inputs: [
//       { name: 'requestId', internalType: 'bytes32', type: 'bytes32' },
//       { name: 'response', internalType: 'bytes', type: 'bytes' },
//       { name: 'err', internalType: 'bytes', type: 'bytes' },
//     ],
//     name: 'handleOracleFulfillment',
//     outputs: [],
//   },
//   {
//     stateMutability: 'view',
//     type: 'function',
//     inputs: [
//       { name: 'user', internalType: 'address', type: 'address' },
//       { name: 'gameId', internalType: 'uint256', type: 'uint256' },
//       { name: 'predictionIdx', internalType: 'uint32', type: 'uint32' },
//     ],
//     name: 'isPredictionCorrect',
//     outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
//   },
//   {
//     stateMutability: 'view',
//     type: 'function',
//     inputs: [],
//     name: 'owner',
//     outputs: [{ name: '', internalType: 'address', type: 'address' }],
//   },
//   {
//     stateMutability: 'nonpayable',
//     type: 'function',
//     inputs: [{ name: 'data', internalType: 'bytes', type: 'bytes' }],
//     name: 'performUpkeep',
//     outputs: [],
//   },
//   {
//     stateMutability: 'payable',
//     type: 'function',
//     inputs: [
//       { name: 'gameId', internalType: 'uint256', type: 'uint256' },
//       {
//         name: 'result',
//         internalType: 'enum SportsPredictionGame.Result',
//         type: 'uint8',
//       },
//     ],
//     name: 'predict',
//     outputs: [],
//   },
//   {
//     stateMutability: 'view',
//     type: 'function',
//     inputs: [{ name: 'gameId', internalType: 'uint256', type: 'uint256' }],
//     name: 'readyToResolve',
//     outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
//   },
//   {
//     stateMutability: 'payable',
//     type: 'function',
//     inputs: [
//       { name: 'sportId', internalType: 'uint256', type: 'uint256' },
//       { name: 'externalId', internalType: 'uint256', type: 'uint256' },
//       { name: 'timestamp', internalType: 'uint256', type: 'uint256' },
//       {
//         name: 'result',
//         internalType: 'enum SportsPredictionGame.Result',
//         type: 'uint8',
//       },
//     ],
//     name: 'registerAndPredict',
//     outputs: [],
//   },
//   {
//     stateMutability: 'nonpayable',
//     type: 'function',
//     inputs: [
//       {
//         name: '_destinationContractReceiver',
//         internalType: 'address',
//         type: 'address',
//       },
//     ],
//     name: 'setDestinationContractReceiver',
//     outputs: [],
//   },
//   {
//     stateMutability: 'nonpayable',
//     type: 'function',
//     inputs: [{ name: 'to', internalType: 'address', type: 'address' }],
//     name: 'transferOwnership',
//     outputs: [],
//   },
//   {
//     stateMutability: 'nonpayable',
//     type: 'function',
//     inputs: [
//       {
//         name: '_destinationChainSelector',
//         internalType: 'uint64',
//         type: 'uint64',
//       },
//     ],
//     name: 'whitelistDestinationChain',
//     outputs: [],
//   },
//   {
//     stateMutability: 'view',
//     type: 'function',
//     inputs: [{ name: '', internalType: 'uint64', type: 'uint64' }],
//     name: 'whitelistedDestinationChains',
//     outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
//   },
//   {
//     stateMutability: 'nonpayable',
//     type: 'function',
//     inputs: [
//       { name: '_beneficiary', internalType: 'address', type: 'address' },
//     ],
//     name: 'withdraw',
//     outputs: [],
//   },
//   {
//     stateMutability: 'nonpayable',
//     type: 'function',
//     inputs: [
//       { name: '_beneficiary', internalType: 'address', type: 'address' },
//       { name: '_token', internalType: 'address', type: 'address' },
//     ],
//     name: 'withdrawToken',
//     outputs: [],
//   },
//   { stateMutability: 'payable', type: 'receive' },
// ] as const

export const sportsPredictionGameABI = [
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "oracle",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "ccipRouter",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "link",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "weth9Token",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "exchangeToken",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "uniswapV3Router",
              "type": "address"
            },
            {
              "internalType": "uint64",
              "name": "subscriptionId",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "destinationChainSelector",
              "type": "uint64"
            },
            {
              "internalType": "uint32",
              "name": "gasLimit",
              "type": "uint32"
            },
            {
              "internalType": "bytes",
              "name": "secrets",
              "type": "bytes"
            },
            {
              "internalType": "string",
              "name": "source",
              "type": "string"
            }
          ],
          "internalType": "struct Config",
          "name": "config",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "destinationChainSelector",
          "type": "uint64"
        }
      ],
      "name": "DestinationChainNotWhitelisted",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "EmptyArgs",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "EmptySecrets",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "EmptySource",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "FailedToWithdrawEth",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "GameAlreadyRegistered",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "GameAlreadyStarted",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "GameIsResolved",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "GameNotReadyToResolve",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "GameNotRegistered",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "GameNotResolved",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InsufficientValue",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidResult",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NoDestinationContractReceiver",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NoInlineSecrets",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "currentBalance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "calculatedFees",
          "type": "uint256"
        }
      ],
      "name": "NotEnoughBalance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NothingToClaim",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NothingToWithdraw",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RequestIsAlreadyPending",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RequestIsNotPending",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ResolveAlreadyRequested",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SenderIsNotRegistry",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TimestampInPast",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ValueTooHigh",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "gameId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Claimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "gameId",
          "type": "uint256"
        }
      ],
      "name": "GameRegistered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "gameId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "enum SportsPredictionGame.Result",
          "name": "result",
          "type": "uint8"
        }
      ],
      "name": "GameResolved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "messageId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "uint64",
          "name": "destinationChainSelector",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "feeToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fees",
          "type": "uint256"
        }
      ],
      "name": "MessageSent",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "NoPendingRequest",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferRequested",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "gameId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "enum SportsPredictionGame.Result",
          "name": "result",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Predicted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "response",
          "type": "bytes"
        }
      ],
      "name": "RequestFailed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        }
      ],
      "name": "RequestFulfilled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        }
      ],
      "name": "RequestSent",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "sportId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "externalId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "requestId",
          "type": "bytes32"
        }
      ],
      "name": "RequestedResult",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "requestId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "response",
          "type": "bytes"
        }
      ],
      "name": "ResultReceived",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "requestId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "TransferRequestSent",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "acceptOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "gameId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "wager",
          "type": "uint256"
        },
        {
          "internalType": "enum SportsPredictionGame.Result",
          "name": "result",
          "type": "uint8"
        }
      ],
      "name": "calculateWinnings",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "checkUpkeep",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "gameId",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "transfer",
          "type": "bool"
        }
      ],
      "name": "claim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "gameId",
          "type": "uint256"
        }
      ],
      "name": "deletePendingRequest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "_destinationChainSelector",
          "type": "uint64"
        }
      ],
      "name": "denylistDestinationChain",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "enum Functions.Location",
              "name": "codeLocation",
              "type": "uint8"
            },
            {
              "internalType": "enum Functions.Location",
              "name": "secretsLocation",
              "type": "uint8"
            },
            {
              "internalType": "enum Functions.CodeLanguage",
              "name": "language",
              "type": "uint8"
            },
            {
              "internalType": "string",
              "name": "source",
              "type": "string"
            },
            {
              "internalType": "bytes",
              "name": "secrets",
              "type": "bytes"
            },
            {
              "internalType": "string[]",
              "name": "args",
              "type": "string[]"
            }
          ],
          "internalType": "struct Functions.Request",
          "name": "req",
          "type": "tuple"
        },
        {
          "internalType": "uint64",
          "name": "subscriptionId",
          "type": "uint64"
        },
        {
          "internalType": "uint32",
          "name": "gasLimit",
          "type": "uint32"
        },
        {
          "internalType": "uint256",
          "name": "gasPrice",
          "type": "uint256"
        }
      ],
      "name": "estimateCost",
      "outputs": [
        {
          "internalType": "uint96",
          "name": "",
          "type": "uint96"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getActiveGames",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "sportId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "externalId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "timestamp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "homeWagerAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "awayWagerAmount",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "resolved",
              "type": "bool"
            },
            {
              "internalType": "enum SportsPredictionGame.Result",
              "name": "result",
              "type": "uint8"
            }
          ],
          "internalType": "struct SportsPredictionGame.Game[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getActivePredictions",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "gameId",
              "type": "uint256"
            },
            {
              "internalType": "enum SportsPredictionGame.Result",
              "name": "result",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "claimed",
              "type": "bool"
            }
          ],
          "internalType": "struct SportsPredictionGame.Prediction[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getDONPublicKey",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "gameId",
          "type": "uint256"
        }
      ],
      "name": "getGame",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "sportId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "externalId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "timestamp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "homeWagerAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "awayWagerAmount",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "resolved",
              "type": "bool"
            },
            {
              "internalType": "enum SportsPredictionGame.Result",
              "name": "result",
              "type": "uint8"
            }
          ],
          "internalType": "struct SportsPredictionGame.Game",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "sportId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "externalId",
          "type": "uint256"
        }
      ],
      "name": "getGameId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getPastPredictions",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "gameId",
              "type": "uint256"
            },
            {
              "internalType": "enum SportsPredictionGame.Result",
              "name": "result",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "claimed",
              "type": "bool"
            }
          ],
          "internalType": "struct SportsPredictionGame.Prediction[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "requestId",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "response",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "err",
          "type": "bytes"
        }
      ],
      "name": "handleOracleFulfillment",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "gameId",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "predictionIdx",
          "type": "uint32"
        }
      ],
      "name": "isPredictionCorrect",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "performUpkeep",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "gameId",
          "type": "uint256"
        },
        {
          "internalType": "enum SportsPredictionGame.Result",
          "name": "result",
          "type": "uint8"
        }
      ],
      "name": "predict",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "sportId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "externalId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        },
        {
          "internalType": "enum SportsPredictionGame.Result",
          "name": "result",
          "type": "uint8"
        }
      ],
      "name": "registerAndPredict",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "gameId",
          "type": "uint256"
        }
      ],
      "name": "requestResolve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "gameId",
          "type": "uint256"
        },
        {
          "internalType": "enum SportsPredictionGame.Result",
          "name": "result",
          "type": "uint8"
        }
      ],
      "name": "resolveGameOriginal",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_destinationContractReceiver",
          "type": "address"
        }
      ],
      "name": "setDestinationContractReceiver",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "_destinationChainSelector",
          "type": "uint64"
        }
      ],
      "name": "whitelistDestinationChain",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "name": "whitelistedDestinationChains",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_beneficiary",
          "type": "address"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_beneficiary",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "withdrawToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// React
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link sportsPredictionGameABI}__.
 */
export function useSportsPredictionGameRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<
    typeof sportsPredictionGameABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof sportsPredictionGameABI,
      TFunctionName,
      TSelectData
    >,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: sportsPredictionGameABI,
    ...config,
  } as UseContractReadConfig<
    typeof sportsPredictionGameABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link sportsPredictionGameABI}__ and `functionName` set to `"calculateWinnings"`.
 */
export function useSportsPredictionGameCalculateWinnings<
  TFunctionName extends 'calculateWinnings',
  TSelectData = ReadContractResult<
    typeof sportsPredictionGameABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof sportsPredictionGameABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: sportsPredictionGameABI,
    functionName: 'calculateWinnings',
    ...config,
  } as UseContractReadConfig<
    typeof sportsPredictionGameABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link sportsPredictionGameABI}__ and `functionName` set to `"checkUpkeep"`.
 */
export function useSportsPredictionGameCheckUpkeep<
  TFunctionName extends 'checkUpkeep',
  TSelectData = ReadContractResult<
    typeof sportsPredictionGameABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof sportsPredictionGameABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: sportsPredictionGameABI,
    functionName: 'checkUpkeep',
    ...config,
  } as UseContractReadConfig<
    typeof sportsPredictionGameABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link sportsPredictionGameABI}__ and `functionName` set to `"estimateCost"`.
 */
export function useSportsPredictionGameEstimateCost<
  TFunctionName extends 'estimateCost',
  TSelectData = ReadContractResult<
    typeof sportsPredictionGameABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof sportsPredictionGameABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: sportsPredictionGameABI,
    functionName: 'estimateCost',
    ...config,
  } as UseContractReadConfig<
    typeof sportsPredictionGameABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link sportsPredictionGameABI}__ and `functionName` set to `"getActiveGames"`.
 */
export function useSportsPredictionGameGetActiveGames<
  TFunctionName extends 'getActiveGames',
  TSelectData = ReadContractResult<
    typeof sportsPredictionGameABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof sportsPredictionGameABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: sportsPredictionGameABI,
    functionName: 'getActiveGames',
    ...config,
  } as UseContractReadConfig<
    typeof sportsPredictionGameABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link sportsPredictionGameABI}__ and `functionName` set to `"getActivePredictions"`.
 */
export function useSportsPredictionGameGetActivePredictions<
  TFunctionName extends 'getActivePredictions',
  TSelectData = ReadContractResult<
    typeof sportsPredictionGameABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof sportsPredictionGameABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: sportsPredictionGameABI,
    functionName: 'getActivePredictions',
    ...config,
  } as UseContractReadConfig<
    typeof sportsPredictionGameABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link sportsPredictionGameABI}__ and `functionName` set to `"getDONPublicKey"`.
 */
export function useSportsPredictionGameGetDonPublicKey<
  TFunctionName extends 'getDONPublicKey',
  TSelectData = ReadContractResult<
    typeof sportsPredictionGameABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof sportsPredictionGameABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: sportsPredictionGameABI,
    functionName: 'getDONPublicKey',
    ...config,
  } as UseContractReadConfig<
    typeof sportsPredictionGameABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link sportsPredictionGameABI}__ and `functionName` set to `"getGame"`.
 */
export function useSportsPredictionGameGetGame<
  TFunctionName extends 'getGame',
  TSelectData = ReadContractResult<
    typeof sportsPredictionGameABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof sportsPredictionGameABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: sportsPredictionGameABI,
    functionName: 'getGame',
    ...config,
  } as UseContractReadConfig<
    typeof sportsPredictionGameABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link sportsPredictionGameABI}__ and `functionName` set to `"getGameId"`.
 */
export function useSportsPredictionGameGetGameId<
  TFunctionName extends 'getGameId',
  TSelectData = ReadContractResult<
    typeof sportsPredictionGameABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof sportsPredictionGameABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: sportsPredictionGameABI,
    functionName: 'getGameId',
    ...config,
  } as UseContractReadConfig<
    typeof sportsPredictionGameABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link sportsPredictionGameABI}__ and `functionName` set to `"getPastPredictions"`.
 */
export function useSportsPredictionGameGetPastPredictions<
  TFunctionName extends 'getPastPredictions',
  TSelectData = ReadContractResult<
    typeof sportsPredictionGameABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof sportsPredictionGameABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: sportsPredictionGameABI,
    functionName: 'getPastPredictions',
    ...config,
  } as UseContractReadConfig<
    typeof sportsPredictionGameABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link sportsPredictionGameABI}__ and `functionName` set to `"isPredictionCorrect"`.
 */
export function useSportsPredictionGameIsPredictionCorrect<
  TFunctionName extends 'isPredictionCorrect',
  TSelectData = ReadContractResult<
    typeof sportsPredictionGameABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof sportsPredictionGameABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: sportsPredictionGameABI,
    functionName: 'isPredictionCorrect',
    ...config,
  } as UseContractReadConfig<
    typeof sportsPredictionGameABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link sportsPredictionGameABI}__ and `functionName` set to `"owner"`.
 */
export function useSportsPredictionGameOwner<
  TFunctionName extends 'owner',
  TSelectData = ReadContractResult<
    typeof sportsPredictionGameABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof sportsPredictionGameABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: sportsPredictionGameABI,
    functionName: 'owner',
    ...config,
  } as UseContractReadConfig<
    typeof sportsPredictionGameABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link sportsPredictionGameABI}__ and `functionName` set to `"readyToResolve"`.
 */
export function useSportsPredictionGameReadyToResolve<
  TFunctionName extends 'readyToResolve',
  TSelectData = ReadContractResult<
    typeof sportsPredictionGameABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof sportsPredictionGameABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: sportsPredictionGameABI,
    functionName: 'readyToResolve',
    ...config,
  } as UseContractReadConfig<
    typeof sportsPredictionGameABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link sportsPredictionGameABI}__ and `functionName` set to `"whitelistedDestinationChains"`.
 */
export function useSportsPredictionGameWhitelistedDestinationChains<
  TFunctionName extends 'whitelistedDestinationChains',
  TSelectData = ReadContractResult<
    typeof sportsPredictionGameABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof sportsPredictionGameABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: sportsPredictionGameABI,
    functionName: 'whitelistedDestinationChains',
    ...config,
  } as UseContractReadConfig<
    typeof sportsPredictionGameABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link sportsPredictionGameABI}__.
 */
export function useSportsPredictionGameWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof sportsPredictionGameABI,
          string
        >['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<
        typeof sportsPredictionGameABI,
        TFunctionName,
        TMode
      > & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof sportsPredictionGameABI, TFunctionName, TMode>(
    { abi: sportsPredictionGameABI, ...config } as any,
  )
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link sportsPredictionGameABI}__ and `functionName` set to `"acceptOwnership"`.
 */
export function useSportsPredictionGameAcceptOwnership<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof sportsPredictionGameABI,
          'acceptOwnership'
        >['request']['abi'],
        'acceptOwnership',
        TMode
      > & { functionName?: 'acceptOwnership' }
    : UseContractWriteConfig<
        typeof sportsPredictionGameABI,
        'acceptOwnership',
        TMode
      > & {
        abi?: never
        functionName?: 'acceptOwnership'
      } = {} as any,
) {
  return useContractWrite<
    typeof sportsPredictionGameABI,
    'acceptOwnership',
    TMode
  >({
    abi: sportsPredictionGameABI,
    functionName: 'acceptOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link sportsPredictionGameABI}__ and `functionName` set to `"claim"`.
 */
export function useSportsPredictionGameClaim<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof sportsPredictionGameABI,
          'claim'
        >['request']['abi'],
        'claim',
        TMode
      > & { functionName?: 'claim' }
    : UseContractWriteConfig<typeof sportsPredictionGameABI, 'claim', TMode> & {
        abi?: never
        functionName?: 'claim'
      } = {} as any,
) {
  return useContractWrite<typeof sportsPredictionGameABI, 'claim', TMode>({
    abi: sportsPredictionGameABI,
    functionName: 'claim',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link sportsPredictionGameABI}__ and `functionName` set to `"denylistDestinationChain"`.
 */
export function useSportsPredictionGameDenylistDestinationChain<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof sportsPredictionGameABI,
          'denylistDestinationChain'
        >['request']['abi'],
        'denylistDestinationChain',
        TMode
      > & { functionName?: 'denylistDestinationChain' }
    : UseContractWriteConfig<
        typeof sportsPredictionGameABI,
        'denylistDestinationChain',
        TMode
      > & {
        abi?: never
        functionName?: 'denylistDestinationChain'
      } = {} as any,
) {
  return useContractWrite<
    typeof sportsPredictionGameABI,
    'denylistDestinationChain',
    TMode
  >({
    abi: sportsPredictionGameABI,
    functionName: 'denylistDestinationChain',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link sportsPredictionGameABI}__ and `functionName` set to `"handleOracleFulfillment"`.
 */
export function useSportsPredictionGameHandleOracleFulfillment<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof sportsPredictionGameABI,
          'handleOracleFulfillment'
        >['request']['abi'],
        'handleOracleFulfillment',
        TMode
      > & { functionName?: 'handleOracleFulfillment' }
    : UseContractWriteConfig<
        typeof sportsPredictionGameABI,
        'handleOracleFulfillment',
        TMode
      > & {
        abi?: never
        functionName?: 'handleOracleFulfillment'
      } = {} as any,
) {
  return useContractWrite<
    typeof sportsPredictionGameABI,
    'handleOracleFulfillment',
    TMode
  >({
    abi: sportsPredictionGameABI,
    functionName: 'handleOracleFulfillment',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link sportsPredictionGameABI}__ and `functionName` set to `"performUpkeep"`.
 */
export function useSportsPredictionGamePerformUpkeep<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof sportsPredictionGameABI,
          'performUpkeep'
        >['request']['abi'],
        'performUpkeep',
        TMode
      > & { functionName?: 'performUpkeep' }
    : UseContractWriteConfig<
        typeof sportsPredictionGameABI,
        'performUpkeep',
        TMode
      > & {
        abi?: never
        functionName?: 'performUpkeep'
      } = {} as any,
) {
  return useContractWrite<
    typeof sportsPredictionGameABI,
    'performUpkeep',
    TMode
  >({
    abi: sportsPredictionGameABI,
    functionName: 'performUpkeep',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link sportsPredictionGameABI}__ and `functionName` set to `"predict"`.
 */
export function useSportsPredictionGamePredict<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof sportsPredictionGameABI,
          'predict'
        >['request']['abi'],
        'predict',
        TMode
      > & { functionName?: 'predict' }
    : UseContractWriteConfig<
        typeof sportsPredictionGameABI,
        'predict',
        TMode
      > & {
        abi?: never
        functionName?: 'predict'
      } = {} as any,
) {
  return useContractWrite<typeof sportsPredictionGameABI, 'predict', TMode>({
    abi: sportsPredictionGameABI,
    functionName: 'predict',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link sportsPredictionGameABI}__ and `functionName` set to `"registerAndPredict"`.
 */
export function useSportsPredictionGameRegisterAndPredict<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof sportsPredictionGameABI,
          'registerAndPredict'
        >['request']['abi'],
        'registerAndPredict',
        TMode
      > & { functionName?: 'registerAndPredict' }
    : UseContractWriteConfig<
        typeof sportsPredictionGameABI,
        'registerAndPredict',
        TMode
      > & {
        abi?: never
        functionName?: 'registerAndPredict'
      } = {} as any,
) {
  return useContractWrite<
    typeof sportsPredictionGameABI,
    'registerAndPredict',
    TMode
  >({
    abi: sportsPredictionGameABI,
    functionName: 'registerAndPredict',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link sportsPredictionGameABI}__ and `functionName` set to `"setDestinationContractReceiver"`.
 */
export function useSportsPredictionGameSetDestinationContractReceiver<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof sportsPredictionGameABI,
          'setDestinationContractReceiver'
        >['request']['abi'],
        'setDestinationContractReceiver',
        TMode
      > & { functionName?: 'setDestinationContractReceiver' }
    : UseContractWriteConfig<
        typeof sportsPredictionGameABI,
        'setDestinationContractReceiver',
        TMode
      > & {
        abi?: never
        functionName?: 'setDestinationContractReceiver'
      } = {} as any,
) {
  return useContractWrite<
    typeof sportsPredictionGameABI,
    'setDestinationContractReceiver',
    TMode
  >({
    abi: sportsPredictionGameABI,
    functionName: 'setDestinationContractReceiver',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link sportsPredictionGameABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function useSportsPredictionGameTransferOwnership<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof sportsPredictionGameABI,
          'transferOwnership'
        >['request']['abi'],
        'transferOwnership',
        TMode
      > & { functionName?: 'transferOwnership' }
    : UseContractWriteConfig<
        typeof sportsPredictionGameABI,
        'transferOwnership',
        TMode
      > & {
        abi?: never
        functionName?: 'transferOwnership'
      } = {} as any,
) {
  return useContractWrite<
    typeof sportsPredictionGameABI,
    'transferOwnership',
    TMode
  >({
    abi: sportsPredictionGameABI,
    functionName: 'transferOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link sportsPredictionGameABI}__ and `functionName` set to `"whitelistDestinationChain"`.
 */
export function useSportsPredictionGameWhitelistDestinationChain<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof sportsPredictionGameABI,
          'whitelistDestinationChain'
        >['request']['abi'],
        'whitelistDestinationChain',
        TMode
      > & { functionName?: 'whitelistDestinationChain' }
    : UseContractWriteConfig<
        typeof sportsPredictionGameABI,
        'whitelistDestinationChain',
        TMode
      > & {
        abi?: never
        functionName?: 'whitelistDestinationChain'
      } = {} as any,
) {
  return useContractWrite<
    typeof sportsPredictionGameABI,
    'whitelistDestinationChain',
    TMode
  >({
    abi: sportsPredictionGameABI,
    functionName: 'whitelistDestinationChain',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link sportsPredictionGameABI}__ and `functionName` set to `"withdraw"`.
 */
export function useSportsPredictionGameWithdraw<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof sportsPredictionGameABI,
          'withdraw'
        >['request']['abi'],
        'withdraw',
        TMode
      > & { functionName?: 'withdraw' }
    : UseContractWriteConfig<
        typeof sportsPredictionGameABI,
        'withdraw',
        TMode
      > & {
        abi?: never
        functionName?: 'withdraw'
      } = {} as any,
) {
  return useContractWrite<typeof sportsPredictionGameABI, 'withdraw', TMode>({
    abi: sportsPredictionGameABI,
    functionName: 'withdraw',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link sportsPredictionGameABI}__ and `functionName` set to `"withdrawToken"`.
 */
export function useSportsPredictionGameWithdrawToken<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof sportsPredictionGameABI,
          'withdrawToken'
        >['request']['abi'],
        'withdrawToken',
        TMode
      > & { functionName?: 'withdrawToken' }
    : UseContractWriteConfig<
        typeof sportsPredictionGameABI,
        'withdrawToken',
        TMode
      > & {
        abi?: never
        functionName?: 'withdrawToken'
      } = {} as any,
) {
  return useContractWrite<
    typeof sportsPredictionGameABI,
    'withdrawToken',
    TMode
  >({
    abi: sportsPredictionGameABI,
    functionName: 'withdrawToken',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link sportsPredictionGameABI}__.
 */
export function usePrepareSportsPredictionGameWrite<
  TFunctionName extends string,
>(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof sportsPredictionGameABI,
      TFunctionName
    >,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: sportsPredictionGameABI,
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof sportsPredictionGameABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link sportsPredictionGameABI}__ and `functionName` set to `"acceptOwnership"`.
 */
export function usePrepareSportsPredictionGameAcceptOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof sportsPredictionGameABI,
      'acceptOwnership'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: sportsPredictionGameABI,
    functionName: 'acceptOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof sportsPredictionGameABI,
    'acceptOwnership'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link sportsPredictionGameABI}__ and `functionName` set to `"claim"`.
 */
export function usePrepareSportsPredictionGameClaim(
  config: Omit<
    UsePrepareContractWriteConfig<typeof sportsPredictionGameABI, 'claim'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: sportsPredictionGameABI,
    functionName: 'claim',
    ...config,
  } as UsePrepareContractWriteConfig<typeof sportsPredictionGameABI, 'claim'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link sportsPredictionGameABI}__ and `functionName` set to `"denylistDestinationChain"`.
 */
export function usePrepareSportsPredictionGameDenylistDestinationChain(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof sportsPredictionGameABI,
      'denylistDestinationChain'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: sportsPredictionGameABI,
    functionName: 'denylistDestinationChain',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof sportsPredictionGameABI,
    'denylistDestinationChain'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link sportsPredictionGameABI}__ and `functionName` set to `"handleOracleFulfillment"`.
 */
export function usePrepareSportsPredictionGameHandleOracleFulfillment(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof sportsPredictionGameABI,
      'handleOracleFulfillment'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: sportsPredictionGameABI,
    functionName: 'handleOracleFulfillment',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof sportsPredictionGameABI,
    'handleOracleFulfillment'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link sportsPredictionGameABI}__ and `functionName` set to `"performUpkeep"`.
 */
export function usePrepareSportsPredictionGamePerformUpkeep(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof sportsPredictionGameABI,
      'performUpkeep'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: sportsPredictionGameABI,
    functionName: 'performUpkeep',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof sportsPredictionGameABI,
    'performUpkeep'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link sportsPredictionGameABI}__ and `functionName` set to `"predict"`.
 */
export function usePrepareSportsPredictionGamePredict(
  config: Omit<
    UsePrepareContractWriteConfig<typeof sportsPredictionGameABI, 'predict'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: sportsPredictionGameABI,
    functionName: 'predict',
    ...config,
  } as UsePrepareContractWriteConfig<typeof sportsPredictionGameABI, 'predict'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link sportsPredictionGameABI}__ and `functionName` set to `"registerAndPredict"`.
 */
export function usePrepareSportsPredictionGameRegisterAndPredict(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof sportsPredictionGameABI,
      'registerAndPredict'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: sportsPredictionGameABI,
    functionName: 'registerAndPredict',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof sportsPredictionGameABI,
    'registerAndPredict'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link sportsPredictionGameABI}__ and `functionName` set to `"setDestinationContractReceiver"`.
 */
export function usePrepareSportsPredictionGameSetDestinationContractReceiver(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof sportsPredictionGameABI,
      'setDestinationContractReceiver'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: sportsPredictionGameABI,
    functionName: 'setDestinationContractReceiver',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof sportsPredictionGameABI,
    'setDestinationContractReceiver'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link sportsPredictionGameABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function usePrepareSportsPredictionGameTransferOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof sportsPredictionGameABI,
      'transferOwnership'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: sportsPredictionGameABI,
    functionName: 'transferOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof sportsPredictionGameABI,
    'transferOwnership'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link sportsPredictionGameABI}__ and `functionName` set to `"whitelistDestinationChain"`.
 */
export function usePrepareSportsPredictionGameWhitelistDestinationChain(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof sportsPredictionGameABI,
      'whitelistDestinationChain'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: sportsPredictionGameABI,
    functionName: 'whitelistDestinationChain',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof sportsPredictionGameABI,
    'whitelistDestinationChain'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link sportsPredictionGameABI}__ and `functionName` set to `"withdraw"`.
 */
export function usePrepareSportsPredictionGameWithdraw(
  config: Omit<
    UsePrepareContractWriteConfig<typeof sportsPredictionGameABI, 'withdraw'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: sportsPredictionGameABI,
    functionName: 'withdraw',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof sportsPredictionGameABI,
    'withdraw'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link sportsPredictionGameABI}__ and `functionName` set to `"withdrawToken"`.
 */
export function usePrepareSportsPredictionGameWithdrawToken(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof sportsPredictionGameABI,
      'withdrawToken'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: sportsPredictionGameABI,
    functionName: 'withdrawToken',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof sportsPredictionGameABI,
    'withdrawToken'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link sportsPredictionGameABI}__.
 */
export function useSportsPredictionGameEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof sportsPredictionGameABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: sportsPredictionGameABI,
    ...config,
  } as UseContractEventConfig<typeof sportsPredictionGameABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link sportsPredictionGameABI}__ and `eventName` set to `"Claimed"`.
 */
export function useSportsPredictionGameClaimedEvent(
  config: Omit<
    UseContractEventConfig<typeof sportsPredictionGameABI, 'Claimed'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: sportsPredictionGameABI,
    eventName: 'Claimed',
    ...config,
  } as UseContractEventConfig<typeof sportsPredictionGameABI, 'Claimed'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link sportsPredictionGameABI}__ and `eventName` set to `"GameRegistered"`.
 */
export function useSportsPredictionGameGameRegisteredEvent(
  config: Omit<
    UseContractEventConfig<typeof sportsPredictionGameABI, 'GameRegistered'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: sportsPredictionGameABI,
    eventName: 'GameRegistered',
    ...config,
  } as UseContractEventConfig<typeof sportsPredictionGameABI, 'GameRegistered'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link sportsPredictionGameABI}__ and `eventName` set to `"GameResolved"`.
 */
export function useSportsPredictionGameGameResolvedEvent(
  config: Omit<
    UseContractEventConfig<typeof sportsPredictionGameABI, 'GameResolved'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: sportsPredictionGameABI,
    eventName: 'GameResolved',
    ...config,
  } as UseContractEventConfig<typeof sportsPredictionGameABI, 'GameResolved'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link sportsPredictionGameABI}__ and `eventName` set to `"MessageSent"`.
 */
export function useSportsPredictionGameMessageSentEvent(
  config: Omit<
    UseContractEventConfig<typeof sportsPredictionGameABI, 'MessageSent'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: sportsPredictionGameABI,
    eventName: 'MessageSent',
    ...config,
  } as UseContractEventConfig<typeof sportsPredictionGameABI, 'MessageSent'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link sportsPredictionGameABI}__ and `eventName` set to `"NoPendingRequest"`.
 */
export function useSportsPredictionGameNoPendingRequestEvent(
  config: Omit<
    UseContractEventConfig<typeof sportsPredictionGameABI, 'NoPendingRequest'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: sportsPredictionGameABI,
    eventName: 'NoPendingRequest',
    ...config,
  } as UseContractEventConfig<
    typeof sportsPredictionGameABI,
    'NoPendingRequest'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link sportsPredictionGameABI}__ and `eventName` set to `"OwnershipTransferRequested"`.
 */
export function useSportsPredictionGameOwnershipTransferRequestedEvent(
  config: Omit<
    UseContractEventConfig<
      typeof sportsPredictionGameABI,
      'OwnershipTransferRequested'
    >,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: sportsPredictionGameABI,
    eventName: 'OwnershipTransferRequested',
    ...config,
  } as UseContractEventConfig<
    typeof sportsPredictionGameABI,
    'OwnershipTransferRequested'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link sportsPredictionGameABI}__ and `eventName` set to `"OwnershipTransferred"`.
 */
export function useSportsPredictionGameOwnershipTransferredEvent(
  config: Omit<
    UseContractEventConfig<
      typeof sportsPredictionGameABI,
      'OwnershipTransferred'
    >,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: sportsPredictionGameABI,
    eventName: 'OwnershipTransferred',
    ...config,
  } as UseContractEventConfig<
    typeof sportsPredictionGameABI,
    'OwnershipTransferred'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link sportsPredictionGameABI}__ and `eventName` set to `"Predicted"`.
 */
export function useSportsPredictionGamePredictedEvent(
  config: Omit<
    UseContractEventConfig<typeof sportsPredictionGameABI, 'Predicted'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: sportsPredictionGameABI,
    eventName: 'Predicted',
    ...config,
  } as UseContractEventConfig<typeof sportsPredictionGameABI, 'Predicted'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link sportsPredictionGameABI}__ and `eventName` set to `"RequestFailed"`.
 */
export function useSportsPredictionGameRequestFailedEvent(
  config: Omit<
    UseContractEventConfig<typeof sportsPredictionGameABI, 'RequestFailed'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: sportsPredictionGameABI,
    eventName: 'RequestFailed',
    ...config,
  } as UseContractEventConfig<typeof sportsPredictionGameABI, 'RequestFailed'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link sportsPredictionGameABI}__ and `eventName` set to `"RequestFulfilled"`.
 */
export function useSportsPredictionGameRequestFulfilledEvent(
  config: Omit<
    UseContractEventConfig<typeof sportsPredictionGameABI, 'RequestFulfilled'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: sportsPredictionGameABI,
    eventName: 'RequestFulfilled',
    ...config,
  } as UseContractEventConfig<
    typeof sportsPredictionGameABI,
    'RequestFulfilled'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link sportsPredictionGameABI}__ and `eventName` set to `"RequestSent"`.
 */
export function useSportsPredictionGameRequestSentEvent(
  config: Omit<
    UseContractEventConfig<typeof sportsPredictionGameABI, 'RequestSent'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: sportsPredictionGameABI,
    eventName: 'RequestSent',
    ...config,
  } as UseContractEventConfig<typeof sportsPredictionGameABI, 'RequestSent'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link sportsPredictionGameABI}__ and `eventName` set to `"RequestedResult"`.
 */
export function useSportsPredictionGameRequestedResultEvent(
  config: Omit<
    UseContractEventConfig<typeof sportsPredictionGameABI, 'RequestedResult'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: sportsPredictionGameABI,
    eventName: 'RequestedResult',
    ...config,
  } as UseContractEventConfig<
    typeof sportsPredictionGameABI,
    'RequestedResult'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link sportsPredictionGameABI}__ and `eventName` set to `"ResultReceived"`.
 */
export function useSportsPredictionGameResultReceivedEvent(
  config: Omit<
    UseContractEventConfig<typeof sportsPredictionGameABI, 'ResultReceived'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: sportsPredictionGameABI,
    eventName: 'ResultReceived',
    ...config,
  } as UseContractEventConfig<typeof sportsPredictionGameABI, 'ResultReceived'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link sportsPredictionGameABI}__ and `eventName` set to `"TransferRequestSent"`.
 */
export function useSportsPredictionGameTransferRequestSentEvent(
  config: Omit<
    UseContractEventConfig<
      typeof sportsPredictionGameABI,
      'TransferRequestSent'
    >,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: sportsPredictionGameABI,
    eventName: 'TransferRequestSent',
    ...config,
  } as UseContractEventConfig<
    typeof sportsPredictionGameABI,
    'TransferRequestSent'
  >)
}
